#!/bin/bash

# Copyright 2015 Google Inc. All Rights Reserved.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Scripts for helping with Blockly++ development.
# Run envsetup.sh to set the path for this script, then
# use the commands with bgit <command>

function start {
  if [ "$1" != "" ]; then
    repo start $1 .
  else
    echo "Usage: bgit start <branch name>"
  fi
}

function close {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before closing a branch!"
    return
  fi

  local branch="$(git rev-parse --abbrev-ref HEAD)"
  if [ "$branch" = "master" ]; then
    echo "Cannot close the master branch"
    return
  fi

  while true; do
    read -p "This will delete the remote and local branches for $branch. Continue? (y/n):" yn
    case $yn in
      [Yy]* ) break;;
      [Nn]* ) return;;
      * ) echo "Please type y or n";;
    esac
  done
  rem_branch="$BLOCKLY_USER-$branch"
  git push origin :$rem_branch
  repo abandon $branch
}

function run_tests_android() {
  local verbose=""
  while [ "$1" != "" ]; do
    case $1 in
      -v | --verbose ) verbose="true";;
      * )             echo "unknown arg $1";;
    esac
    shift
  done

  local args=""
  if test -z $verbose; then
    args="-q"
  fi

  echo -n "Running tests... "

  pushd android/Blockly/ >& /dev/null

  if ! ./gradlew $args cC; then
    echo "FAILED - ABORTING"
    popd >& /dev/null
    exit 1
  fi

  echo "SUCCESS"
  popd >& /dev/null
}

function run_tests() {
  if [[ $(git config --get remote.origin.url) == *"android"* ]]; then
    if [ $(uname) == "Linux" ]; then
      run_tests_android $*
    else
      echo "Tests not yet supported on this platform."
    fi
  else
    echo "Tests not yet supported for non-Android"
  fi
}

function push {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before pushing commits!"
    return
  fi

  if [[ $(git config --get remote.google.url) == *"google/blockly"* ]]; then
    echo "You are on the public Blockly project. Do not push here."
    return
  fi

  local args=""
  local notest=""

  while [ "$1" != "" ]; do
    case $1 in
      -f | --force )  args="$args $1";;
      --notest )      notest="true";;
      * )             echo "unknown arg $1";;
    esac
    shift
  done

  if [ -z $notest ]; then
    run_tests
  fi

  local branch="$(git rev-parse --abbrev-ref HEAD)"
  local rem_branch="$BLOCKLY_USER-$branch"
  git push$args origin "$branch:$rem_branch"
  echo "Pushed change to $rem_branch. Add a reviewer on the website."
}

#NOTE: pull will only work after you've created the branch with push
function pull {
  if [ "$BLOCKLY_INIT" != true ]; then
    echo "Must run envsetup.sh before pulling!"
    return
  fi
  repo sync .
}

#Rebase the current branch on to master
function rebase {
  # Update the master branch
  # git pull origin master:master

  local args=""
  while [ "$1" != "" ]; do
    case $1 in
      -i | --interactive )  args="$args $1";;
      * )                   echo "unknown arg $1";;
    esac
    shift
  done

  # Rebase the current branch with args
  repo rebase$args
}

function help {
  echo "Available commands are:"
  echo "bgit start <branch> # Start a new local branch."
  echo "bgit close # Delete the current branch on GitHub and locally"
  echo "bgit push # Push the current branch to GitHub. Creates a remote branch if needed. Add '--notest' to skip pre-push tests."
  echo "bgit pull # Pull any changes to the current branch from GitHub"
  echo "bgit rebase # Rebase your current branch on to master"
  echo "bgit test # Runs android tests. Only works on linux for now."
}

if [ "$1" = "" ]; then
  help
else
  command=$1
  shift
  case $command in
    start )   start $@;;
    close )   close $@;;
    push )    push $@;;
    pull )    pull $@;;
    rebase )  rebase $@;;
    test)     run_tests $@;;
    *)        help;;
  esac
fi
